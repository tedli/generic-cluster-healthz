apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ .Values.name }}
  namespace: {{ .Release.Namespace }}
automountServiceAccountToken: false
---
{{ $ca := genCA "ca" 3650 }}
{{ $name := printf "%s" .Values.name }}
{{ $cn := printf "%s.%s" .Values.name .Release.Namespace }}
{{ $svc := printf "%s.%s.svc" .Values.name .Release.Namespace }}
{{ $cert := genSignedCert $cn nil (list $name $cn $svc) 365 $ca }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Values.name }}
  namespace: {{ .Release.Namespace }}
data:
  ca.crt: "{{ .Values.ca }}"
  token: "{{ .Values.token }}"
  cert.pem: "{{ $cert.Cert | b64enc }}"
  key.pem: "{{ $cert.Key | b64enc }}"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Values.name }}
  namespace: {{ .Release.Namespace }}
data:
  host: "{{ .Values.host }}"
  port: "{{ .Values.port }}"
  ca.pem: "{{ $ca.Cert | b64enc }}"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.name }}
  namespace: {{ .Release.Namespace }}
  labels:
    k8s-app: {{ .Values.name }}
    app: {{ .Values.name }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Values.name }}
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        prometheus.io/port: "8080"
        prometheus.io/scrape: "true"
      labels:
        k8s-app: {{ .Values.name }}
        app: {{ .Values.name }}
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - {{ .Values.name }}
            topologyKey: kubernetes.io/hostname
      containers:
      - name: probe
        image: {{ .Values.image }}
        args:
        - --vklog=2
        - --vmodule=main=4,server=4
        - --cert-path=/etc/certs/cert.pem
        - --key-path=/etc/certs/key.pem
        env:
        - name: KUBERNETES_SERVICE_HOST
          valueFrom:
            configMapKeyRef:
              name: {{ .Values.name }}
              key: host
        - name: KUBERNETES_SERVICE_PORT
          valueFrom:
            configMapKeyRef:
              name: {{ .Values.name }}
              key: port
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8080
        ports:
        - name: http
          containerPort: 8080
        volumeMounts:
        - name: sa
          mountPath: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          subPath: ca.crt
          readOnly: true
        - name: sa
          mountPath: /var/run/secrets/kubernetes.io/serviceaccount/token
          subPath: token
          readOnly: true
        - name: sa
          mountPath: /etc/certs/cert.pem
          subPath: cert.pem
          readOnly: true
        - name: sa
          mountPath: /etc/certs/key.pem
          subPath: key.pem
          readOnly: true
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
      serviceAccountName: {{ .Values.name }}
      volumes:
      - name: sa
        secret:
          secretName: {{ .Values.name }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.name }}
  namespace: {{ .Release.Namespace }}
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 8080
  - name: https
    port: 8443
  selector:
    k8s-app: {{ .Values.name }}
    app: {{ .Values.name }}
